{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CameraControls","install","THREE","App","onMouseMove","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","canvas","document","querySelector","desiredWidthInCSSPixels","desiredHeightInCSSPixels","style","width","height","devicePixelRatio","renderer","WebGLRenderer","alpha","antialias","setClearColor","body","appendChild","cameraControls","domElement","keepMousedownListener","keepContextmenuListener","disableTouchRotation","disableThreeFingerTouchTruck","disableTwoFingerTouchTruck","maxDistance","FontLoader","load","font","hello","TextGeometry","size","curveSegments","center","material","MeshBasicMaterial","color","transparent","helloMesh","Mesh","back","backMesh","add","clock","render","delta","getDelta","requestAnimationFrame","update","react_default","a","createElement","id","Component","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAgBAA,IAAeC,QAAQ,CAACC,MAAOA,QAuHhBC,6MAXbC,YAAc,gGAtGZ,IAAMC,EAAQ,IAAIC,QACZC,EAAS,IAAIC,oBAAkB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KACtFJ,EAAOK,SAASC,IAAI,EAAG,EAAG,MAkB1B,IAAMC,EAASC,SAASC,cAAc,mBAChCC,EAA0BR,OAAOC,WACjCQ,EAA2BT,OAAOE,YAExCG,EAAOK,MAAMC,MAAQH,EAA0B,KAC/CH,EAAOK,MAAME,OAASH,EAA2B,KAGjD,IAAMI,EAAmBb,OAAOa,kBAAoB,EACpDR,EAAOM,MAAQH,EAA0BK,EACzCR,EAAOO,OAASH,EAA2BI,EAE3C,IAAMC,EAAW,IAAIC,gBAAc,CAACC,OAAO,EAAMC,WAAW,EAAMZ,WAClES,EAASI,cAAc,SAAU,GACjCZ,SAASa,KAAKC,YAAYf,GAE1B,IAAMgB,EAAiB,IAAI9B,IAAeO,EAAQgB,EAASQ,WAAY,CACrEC,uBAAuB,EACvBC,yBAAyB,EACzBC,sBAAsB,EACtBC,8BAA8B,EAC9BC,4BAA4B,IAG9BN,EAAeO,YAAc,MAEd,IAAIC,cAEZC,KAAK,mDAAoD,SAAUC,GAExE,IAAMC,EAAQ,IAAIC,eAAa,kBAAmB,CAChDF,KAAMA,EACNG,KAAM,GACNtB,OAAQ,EACRuB,cAAe,KAGjBH,EAAMI,SAGN,IAAMC,EAAW,IAAIC,oBAAkB,CAACC,MAAO,SAAUC,aAAa,IAGhEC,EAAY,IAAIC,OAAKV,EAAOK,GAElCI,EAAUtC,SAASC,IAAI,EAAG,EAAG,KAE7B,IAAMuC,EAAO,IAAIV,eAAa,YAAa,CACzCF,KAAMA,EACNG,KAAM,GACNtB,OAAQ,EACRuB,cAAe,IAGjBQ,EAAKP,SAEL,IAAMQ,EAAW,IAAIF,OAAKC,EAAMN,GAEhCO,EAASzC,SAASC,IAAI,EAAG,EAAG,GAE5BR,EAAMiD,IAAIJ,GACV7C,EAAMiD,IAAID,KAMZ,IAAME,EAAQ,IAAIrD,SAIlB,SAASsD,IACP,IAAMC,EAAQF,EAAMG,WACpBC,sBAAsBH,GACtBjC,EAASiC,OAAOnD,EAAOE,GACvBuB,EAAe8B,OAAOH,GANxBD,oCAkBA,OACEK,EAAAC,EAAAC,cAAA,UAAQC,GAAI,0BAhHAC,aCNEC,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASd,OAAOK,EAAAC,EAAAC,cAACQ,EAAD,MAASxD,SAASyD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.266f7309.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport * as THREE from \"three\"\nimport {\n  Scene, PerspectiveCamera,\n  WebGLRenderer,\n  FontLoader,\n  TextGeometry,\n  MeshPhongMaterial,\n  MeshBasicMaterial,\n  Mesh\n} from \"three\"\n// import OrbitControls from \"./three/OrbitControls\"\n// import BetterOrbitControls from \"./three/BetterOrbitControls\"\n// import FirstPersonControls from \"./three/FirstPersonControls\"\nimport CameraControls from \"camera-controls\"\n\nCameraControls.install({THREE: THREE})\n\nclass App extends Component {\n  \n  componentDidMount() {\n    \n    const scene = new Scene()\n    const camera = new PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000)\n    camera.position.set(0, 0, 1200)\n    \n    // const controls = new OrbitControls(camera)\n    // const controls = new BetterOrbitControls(camera)\n    // controls.target.set(0, 0, 0)\n    // controls.update()\n    \n    \n    // const fpcontrols = new FirstPersonControls(camera)\n    // fpcontrols.lookSpeed = 0.0125\n    // fpcontrols.movementSpeed = 500\n    // fpcontrols.noFly = false\n    // fpcontrols.lookVertical = true\n    // fpcontrols.lookAt(scene.position)\n    \n    \n    // renderer.setSize(window.innerWidth, window.innerHeight)\n    \n    const canvas = document.querySelector(\"#canvas__render\")\n    const desiredWidthInCSSPixels = window.innerWidth\n    const desiredHeightInCSSPixels = window.innerHeight\n    // set the display size of the canvas.\n    canvas.style.width = desiredWidthInCSSPixels + \"px\"\n    canvas.style.height = desiredHeightInCSSPixels + \"px\"\n    \n    // set the size of the drawingBuffer\n    const devicePixelRatio = window.devicePixelRatio || 1\n    canvas.width = desiredWidthInCSSPixels * devicePixelRatio\n    canvas.height = desiredHeightInCSSPixels * devicePixelRatio\n    \n    const renderer = new WebGLRenderer({alpha: true, antialias: true, canvas})\n    renderer.setClearColor(0xfffff0, 1)\n    document.body.appendChild(canvas)\n    \n    const cameraControls = new CameraControls(camera, renderer.domElement, {\n      keepMousedownListener: false,\n      keepContextmenuListener: false,\n      disableTouchRotation: true,\n      disableThreeFingerTouchTruck: true,\n      disableTwoFingerTouchTruck: true,\n    })\n    \n    cameraControls.maxDistance = 1200\n    \n    const loader = new FontLoader()\n    \n    loader.load('resources/fonts/helvetiker_regular.typeface.json', function (font) {\n      \n      const hello = new TextGeometry('Hello three.js!', {\n        font: font,\n        size: 80,\n        height: 0,\n        curveSegments: 20\n      })\n      \n      hello.center()\n      \n      // const material = new MeshPhongMaterial({color: 0xff0000, transparent: true})\n      const material = new MeshBasicMaterial({color: 0xff0000, transparent: false})\n      // material.map.minFilter = THREE.LinearFilter;\n      \n      const helloMesh = new Mesh(hello, material)\n      \n      helloMesh.position.set(0, 0, 500)\n      \n      const back = new TextGeometry('Back Year', {\n        font: font,\n        size: 50,\n        height: 0,\n        curveSegments: 8\n      })\n      \n      back.center()\n      \n      const backMesh = new Mesh(back, material)\n      \n      backMesh.position.set(0, 0, 0)\n      \n      scene.add(helloMesh)\n      scene.add(backMesh)\n      \n    })\n    // const ambientLight = new THREE.AmbientLight(0xffffff)\n    // scene.add(ambientLight)\n    \n    const clock = new THREE.Clock()\n    \n    render()\n    \n    function render() {\n      const delta = clock.getDelta()\n      requestAnimationFrame(render)\n      renderer.render(scene, camera)\n      cameraControls.update(delta)\n      // controls.update();\n      // fpcontrols.update(delta)\n    }\n    \n  }\n  \n  onMouseMove = () => {\n  \n  }\n  \n  render() {\n    return (\n      <canvas id={\"canvas__render\"}/>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}